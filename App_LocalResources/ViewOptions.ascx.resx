<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ShowHiddenPages.Text" xml:space="preserve">
    <value>Show Hidden Pages</value>
  </data>
  <data name="ShowHiddenPages.Help" xml:space="preserve">
    <value>Check if you want to show hidden pages.</value>
  </data>
  <data name="ShowDisabledPages.Text" xml:space="preserve">
    <value>Show Disabled Pages</value>
  </data>
  <data name="ShowDisabledPages.Help" xml:space="preserve">
    <value>Check if you want to show disabled pages.</value>
  </data>
  <data name="Mode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="Mode.Help" xml:space="preserve">
    <value>Select a mode for child links to operate by.</value>
  </data>
  <data name="Children.Text" xml:space="preserve">
    <value>Children of this page</value>
  </data>
  <data name="Siblings.Text" xml:space="preserve">
    <value>Siblings of this page</value>
  </data>
  <data name="Another.Text" xml:space="preserve">
    <value>Children of another page</value>
  </data>
  <data name="Display.Text" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Display.Help" xml:space="preserve">
    <value>Select a display for child links to operate by.</value>
  </data>
  <data name="Template.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="Dropdown.Text" xml:space="preserve">
    <value>Dropdown</value>
  </data>
  <data name="HtmlHeader.Text" xml:space="preserve">
    <value>HTML Header</value>
  </data>
  <data name="HtmlHeader.Help" xml:space="preserve">
    <value>Enter the header html for the child links module.</value>
  </data>
  <data name="HtmlSeparator.Text" xml:space="preserve">
    <value>HTML Separator</value>
  </data>
  <data name="HtmlSeparator.Help" xml:space="preserve">
    <value>Enter the separator html for the child links module.</value>
  </data>
  <data name="HtmlBody.Text" xml:space="preserve">
    <value>HTML Body</value>
  </data>
  <data name="HtmlBody.Help" xml:space="preserve">
    <value>Enter the body html for the child links module.</value>
  </data>
  <data name="HtmlFooter.Text" xml:space="preserve">
    <value>HTML Footer</value>
  </data>
  <data name="HtmlFooter.Help" xml:space="preserve">
    <value>Enter the footer html for the child links module.</value>
  </data>
  <data name="TemplateHelp.Text" xml:space="preserve">
    <value>Template Help</value>
  </data>
  <data name="TemplateHelpDescription.Text" xml:space="preserve">
    <value>In this section, you can view the tokens for customizing the child links template.</value>
  </data>
  <data name="HeaderFooter.Text" xml:space="preserve">
    <value>Header/Footer Tokens</value>
  </data>
  <data name="ParentLink.Text" xml:space="preserve">
    <value>The Url of the parent page</value>
  </data>
  <data name="ParentName.Text" xml:space="preserve">
    <value>The name of the parent page</value>
  </data>
  <data name="Body.Text" xml:space="preserve">
    <value>Body Tokens</value>
  </data>
  <data name="Link.Text" xml:space="preserve">
    <value>The Url of the child page</value>
  </data>
  <data name="LinkName.Text" xml:space="preserve">
    <value>The name of the child page</value>
  </data>
  <data name="LinkNameXXX.Text" xml:space="preserve">
    <value>The name of the child page where xxx is the number of characters to display.</value>
  </data>
  <data name="LinkDescription.Text" xml:space="preserve">
    <value>The description of the child page</value>
  </data>
  <data name="LinkDescriptionXXX.Text" xml:space="preserve">
    <value>The description of the child page where xxx is the number of characters to display.</value>
  </data>
  <data name="Icon.Text" xml:space="preserve">
    <value>The Icon of the child page</value>
  </data>
  <data name="TabID.Text" xml:space="preserve">
    <value>The Tab ID of the child page</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>The title of the child page</value>
  </data>
  <data name="TitleXXX.Text" xml:space="preserve">
    <value>The title of the child page where xxx is the number of characters to display.</value>
  </data>
  <data name="IsCurrent.Text" xml:space="preserve">
    <value>Show content if page matches current page.</value>
  </data>
  <data name="IsNotCurrent.Text" xml:space="preserve">
    <value>Show content if page does not match current page.</value>
  </data>
  <data name="ControlTitle_viewoptions.Text" xml:space="preserve">
    <value>Child Links View Options</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Child Links View Options&lt;/h1&gt;&lt;p&gt;This module allows you to customize the child links module.&lt;/p&gt;</value>
  </data>
  <data name="TopLevel.Text" xml:space="preserve">
    <value>Children of top level page</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Child Link Settings</value>
  </data>
  <data name="HtmlEmpty.Help" xml:space="preserve">
    <value>Enter the empty html to be displayed when no child links exist.</value>
  </data>
  <data name="HtmlEmpty.Text" xml:space="preserve">
    <value>HTML Empty</value>
  </data>
  <data name="ParentDescription.Text" xml:space="preserve">
    <value>The description of the parent page.</value>
  </data>
  <data name="ItemIndex.Text" xml:space="preserve">
    <value>The index of the page</value>
  </data>
  <data name="DropdownAlphabetical.Text" xml:space="preserve">
    <value>Dropdown (Alphabetical)</value>
  </data>
  <data name="GrandParentDescription.Text" xml:space="preserve">
    <value>The description of the grand parent page.</value>
  </data>
  <data name="GrandParentLink.Text" xml:space="preserve">
    <value>The Url of the grand parent page</value>
  </data>
  <data name="GrandParentName.Text" xml:space="preserve">
    <value>The name of the grand parent page</value>
  </data>
  <data name="Keywords.Text" xml:space="preserve">
    <value>The keywords of the child page</value>
  </data>
</root>